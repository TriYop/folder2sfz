import argparse
import datetime
import logging
import os.path

from directoryscanner import DirectoryScanner
from samplescanner import *
from sforzando import SFZInstrument, SFZGroup, SFZRegion

"""

"""
logger = logging.getLogger(__name__)


def get_instrument(samples: list, basepath:str, is_drum:bool=False, looping:bool=False) -> SFZInstrument:
    sf = SFZInstrument()
    sf.set_meta("SFZ Instrument")
    sf.set_meta(f"Generated by SFZBuilder on {datetime.datetime.now()}")

    last_key = -1
    last_vel = 0
    current_key = -1
    current_vel = -1
    samples_by_key = {}
    logger.info(f"Exporting {len(samples)} samples instrument.")
    for sample in samples:
        logger.debug(f"Exporting sample {sample._filename} with key: '{sample._key:x}:{sample._vel:x}'")
        skey = f"{sample._key:x}:{sample._vel:x}"
        if skey not in samples_by_key:
            samples_by_key[skey] = [sample]
        else:
            samples_by_key[skey].append(sample)

    for sample_key in sorted(samples_by_key.keys()):
        sample_set = samples_by_key[sample_key]
        rr_len = len(sample_set) if len(sample_set) > 1 else None

        if current_key != sample_set[0]._key:
            current_key = sample_set[0]._key
            current_vel = -1
        last_vel = current_vel + 1
        current_vel = sample_set[0]._vel

        grp = SFZGroup(keycenter=sample_set[0]._key, seq_length=rr_len, lovel=last_vel, hivel=current_vel,
                       lokey=sample_set[0]._key, hikey=sample_set[0]._key)
        rr_len = rr_len or 0

        for idx, smpl in enumerate(sorted(sample_set, key=lambda x: x._filename)):
            position = idx + 1 if rr_len > 1 else None
            reg = SFZRegion(
                sample_path=os.path.relpath(smpl._filename, basepath),
                seq_position=position,
            )
            grp.add_region(reg)
        sf.add_group(grp)

    if is_drum:
        sf.set_param("loop_mode", "one_shot")
    elif looping:
        sf.set_param("loop_mode", "loop_sustain")
    else:
        sf.set_param("loop_mode", "no_loop")

    sf.set_param("volume", "0")
    sf.set_param("ampeg_attack", "0.001")
    sf.set_param("ampeg_release", "0.7")
    sf.set_param("ampeg_dynamic", "1")

    return sf


def scan_dir_for_samples(scan_path: str, looping:bool = False) -> []:
    """Generates a sforzando soundfont from a directory"""
    logger.info(f"Starting scan for samples in {scan_path}")
    scanner_chain = SampleAnalyzerChain(looping=looping)
    scanner_chain.append_analyzer(NamingSampleAnalyzer())
    scanner_chain.append_analyzer(SignalSampleAnalyzer())
    ds = DirectoryScanner(scan_path, analyzers=scanner_chain)
    samples = ds.scan_for_samples(
        [SAMPLE_FORMAT_OGG, SAMPLE_FORMAT_WAV, SAMPLE_FORMAT_MP3, SAMPLE_FORMAT_FLAC, SAMPLE_FORMAT_AIF])
    return samples



if __name__ == '__main__':


    parser = argparse.ArgumentParser(description="Builds a SFZ from a directory containing samples")
    parser.add_argument("-i", "--input-dir", dest="path", type=str, help="path to the samples directory", required=True)
    parser.add_argument("-o", "--output-file", dest="output", type=str, help="path to the output file", required=False)
    parser.add_argument("-d", "--drums", dest="is_drums", help="enhance generated soundfont for drums", action='store_true', default=False)
    parser.add_argument("-l", "--looping", dest="looping", help="try to identify looping points", action='store_true', default=False)
    parser.add_argument("-v", "--verbose", dest="verbose", help="Display verbose output", action='store_true', default=False)

    args = parser.parse_args()

    logging.basicConfig(level=logging.DEBUG if args.verbose else logging.INFO,
                        format="%(levelname)7s - %(name)s : %(message)s - %(funcName)s (line %(lineno)s)", style='%')

    scan_path = args.path


    if args.output:
        if "/" in args.output:
            out_file = os.path.join(args.output)
        else:
            scan_parent = os.path.dirname(scan_path)
            out_file = os.path.join(scan_parent, args.output)
    else:
        out_file = f"{args.path}.sfz"

    logger.info("Starting sound bank generation")
    logger.info("Samples  root  path: %s", scan_path)
    logger.info("Soundbank file path: %s", out_file)
    logger.info("Drum mode activated: %s", args.is_drums)
    logger.info("Loop mode activated: %s", args.looping)


    samples = scan_dir_for_samples(scan_path, looping=args.looping)

    if samples is None or len(samples) == 0:
        logger.warning(f"No sample found in provided input directory ({scan_path})")
        exit(1)

    sf = get_instrument(samples, os.path.dirname(out_file), is_drum=args.is_drums, looping=args.looping)

    # if not os.path.exists(f"{scan_path}.sfz"):
    with open(out_file, "w") as sfz:
        sfz.write(f"{sf}")

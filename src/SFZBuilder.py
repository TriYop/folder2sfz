import datetime

from sforzando import SFZInstrument, SFZControl, SFZGroup, SFZRegion
from samplescanner import *
from directoryscanner import DirectoryScanner
import os.path
import argparse
import logging

"""

"""

def get_instrument(samples:list, basepath) -> SFZInstrument:
    sf = SFZInstrument()
    sf.set_meta("SFZ Instrument")
    sf.set_meta(f"Generated by SFZBuilder on {datetime.datetime.now()}")

    gp = SFZGroup()

    last_key = -1
    last_vel = -1
    current_key = -1
    current_vel = -1
    for sample in sorted(samples, key=lambda s: f"{s._key:x}:{s._vel:x}"):
        print(f"Exporting sample {sample._filename} with key: '{sample._key:x}:{sample._vel:x}'")
        if current_key != sample._key:
            last_key = current_key
            current_key = sample._key
            last_vel = -1
            current_vel = -1
            if len(gp.regions)>=1:
                gp.regions[-1]._hivel=127

        last_vel = current_vel + 1
        current_vel = sample._vel

        reg = SFZRegion(
            sample_path=os.path.relpath(sample._filename, basepath),
            lokey=sample._key,
            hikey=sample._key,
            keycenter=sample._key,
            lovel=last_vel,
            hivel=sample._vel)

        gp.add_region(reg)

    sf.set_param("volume", "0")
    sf.set_param("ampeg_attack", "0.001")
    sf.set_param("ampeg_release", "0.7")
    sf.set_param("ampeg_dynamic", "1")

    sf.add_group(gp)
    return sf

def scan_dir_for_samples(scan_path:str) -> []:
    """Generates a sforzando soundfont from a directory"""
    logger.info(f"Starting scan for samples in {scan_path}")
    scanner_chain = SampleAnalyzerChain()
    scanner_chain.append_analyzer(NamingSampleAnalyzer())
    scanner_chain.append_analyzer(SignalSampleAnalyzer())
    ds = DirectoryScanner(scan_path, analyzers=scanner_chain)
    samples= ds.scan_for_samples([SAMPLE_FORMAT_OGG, SAMPLE_FORMAT_WAV, SAMPLE_FORMAT_MP3, SAMPLE_FORMAT_FLAC, SAMPLE_FORMAT_AIF])
    return samples

logger = logging.getLogger("folder2sfz")

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)

    parser = argparse.ArgumentParser(description="Builds a SFZ from a directory containing samples")
    parser.add_argument("-i", "--input-dir", dest="path", type=str, help="path to the samples directory", required=True)
    parser.add_argument( "-o","--output-file", dest="output", type=str, help="path to the output file", required=False)

    args = parser.parse_args()
    scan_path = args.path

    if args.output:
        if "/" in args.output:
            out_file = os.path.join(args.output)
        else:
            scan_parent = os.path.dirname(scan_path)
            out_file =  os.path.join(scan_parent, args.output)
    else:
        out_file = f"{args.path}.sfz"

    samples = scan_dir_for_samples(scan_path)

    if samples is not None and len(samples)>0:
        sf = get_instrument(samples, os.path.dirname(out_file))

    #if not os.path.exists(f"{scan_path}.sfz"):
    with open(out_file, "w") as sfz:
        sfz.write(f"{sf}")
